// Code generated by go-bindata.
// sources:
// ../migrations/001_create_album.sql
// ../migrations/002_create_article.sql
// ../migrations/003_create_comment.sql
// ../migrations/004_create_user.sql
// ../migrations/005_create_user_profile.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_albumSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x8b\xd3\x50\x14\xc5\xf7\xf9\x14\x77\x97\x04\x33\x90\x28\x03\xe2\x90\x8d\xd6\xc5\x6c\xdc\xf8\x07\x77\xc3\x6b\x72\x5b\x1f\x93\xbc\x94\x97\xfb\xa6\x66\xa7\xc8\x38\x28\x33\x88\xa0\xce\x80\x9b\xea\x4a\x50\xac\xa8\xd4\x82\x82\x9f\x26\x49\xb3\xf2\x2b\x48\xf3\xa7\x49\x4b\x99\x6d\xee\xf9\xdd\x9c\x7b\xde\xd9\xd9\x81\x2b\x21\x1f\x4a\x46\x08\xf7\x47\x9a\x2f\xa3\x11\x10\xeb\x07\x08\x7c\x00\xf8\x98\xc7\x14\x03\x0b\xfa\x2a\xdc\xd3\x3c\x89\x4b\x55\x35\x2d\xbf\x19\x1a\x00\x00\xf7\x81\x0b\x32\x1c\xdb\x04\x11\x11\x08\x15\x04\xc0\x14\x45\x07\x5c\x78\x12\x43\x14\x64\x95\x3a\xe2\x14\x20\x88\x23\x26\xbd\x47\x4c\x1a\x57\x77\x77\x3b\x80\x8f\x03\xa6\x02\x02\x5d\x07\x2f\x0a\x97\x10\xe8\xd9\xbb\x93\xfc\xf3\x24\x9b\x9c\x14\x1f\x2f\xf4\x6a\xc7\x88\x7b\xa4\x24\xc2\xda\x92\x6d\x6c\x2d\xac\xb1\x43\x4c\xc6\x91\xf4\xe3\xb5\xbf\xdb\xdb\xc9\xf4\xf8\x47\xf1\xe6\xeb\x62\x7a\x56\xb3\xb1\x0a\x43\x26\x93\x0d\xe3\x2d\x59\xa9\xaa\x70\xda\x24\x9a\xb9\xdd\x59\xfc\xea\x75\x3a\x7f\x96\x9d\xcf\x8a\xf3\x9f\x35\x75\xc4\x71\x2c\x54\x78\x19\x55\x5c\x1c\x2f\xa6\xbf\xb3\x2f\x1f\xb2\xb7\xdf\x1a\x47\xc4\x48\xc5\x40\x5c\x24\x25\xd8\x72\x4e\xcb\xe5\x2f\x67\xd9\x93\xa7\x37\xc0\x5e\x9c\xbd\xc8\x3f\xfd\xfd\xf7\xe7\xd4\x49\x7f\x7d\xaf\x3c\x34\x61\x4a\x5e\x5e\x76\x88\x89\xc1\x7d\x73\x15\x15\xec\xdf\xe9\xdd\x7e\x78\x70\xef\xd6\x83\xbb\x60\x94\xaf\x66\xd5\xe7\x59\xb5\x61\xab\xb2\x60\x82\x8a\xb9\x18\x42\x9f\x24\xa2\x66\x02\x8a\x21\x17\xe8\xee\x0b\x11\xf5\x6e\x6e\x74\xc0\x75\xae\xad\x6c\x2e\x63\x8c\x91\x5c\x45\x83\xeb\x8d\x63\x57\xcf\xdf\xcf\xd3\xe7\xa7\xfa\x9e\xa6\x75\x4b\xd9\x8b\xc6\xa2\x5b\xcb\xaa\x8c\xff\x03\x00\x00\xff\xff\x74\xaa\x01\xcb\xb7\x02\x00\x00")

func _001_create_albumSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_albumSql,
		"001_create_album.sql",
	)
}

func _001_create_albumSql() (*asset, error) {
	bytes, err := _001_create_albumSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_album.sql", size: 695, mode: os.FileMode(436), modTime: time.Unix(1541991428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_create_articleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x6b\xd4\x50\x14\xc5\xf7\xf9\x14\x77\x97\x0c\x4e\x61\x46\x29\xa8\x65\x36\x3a\x2e\x0a\xe2\x42\xad\xb8\x2b\xaf\xc9\x9d\xe9\xa3\xc9\x7d\xc3\xcb\x7d\x9d\xce\xae\x22\xc3\xa0\x58\x44\xd0\xb6\x0b\x17\x55\x37\x82\x7f\x2a\x2a\x55\x50\xf1\xcb\x38\x99\xc9\xca\xaf\x20\x49\x5e\x9a\xb4\xd4\x6e\x93\xf3\xbb\xf7\xdc\xf3\xce\xc2\x02\x5c\x88\x64\x5f\x0b\x46\x58\x19\x38\x81\x56\x03\x60\xb1\x16\x22\xc8\x1e\xe0\x96\x8c\x39\x06\xa1\x59\xfa\x21\x2e\x39\xbe\xc6\x4c\x57\xfc\xb7\x5f\x3d\x07\x00\x40\x06\x20\x89\xbd\x76\xab\x01\xa4\x18\xc8\x84\x21\x08\xc3\x6a\x55\x92\xaf\x31\x42\xe2\x66\xae\x63\xc9\x21\x02\x6d\x0a\xed\xaf\x0b\xed\x5d\x5c\x5c\xac\x01\x01\xf6\x84\x09\x19\x5c\x17\x7c\x15\x65\x10\xb8\xc9\xee\x64\xf6\xee\x20\x39\x98\xa4\xaf\xf7\xdd\x62\x86\xd1\x12\x4e\x0c\x38\x8b\x5b\xb9\x7d\xd3\xca\x37\x70\x34\x54\x3a\x88\x4f\x6c\x6d\x9d\x4d\x4d\xc7\x5f\xd2\xe7\x1f\xe7\x87\x3b\x96\x8d\x4d\x14\x09\x3d\x3a\x65\xb8\x22\x0b\x95\xaf\x88\x33\x3c\x54\xd4\x67\xdc\xe2\xea\xa2\xea\x8c\x0f\x6f\x92\xdd\x89\xd5\x0b\xc3\xeb\x4a\xd7\x86\xfe\xc7\xcd\x9f\x5f\x2f\xe7\xdb\xe3\x72\x49\x9e\x7d\x15\x73\x09\xb4\x6a\xee\x9f\x3e\x9b\x7e\x7f\x98\xec\x1d\xa5\x7b\x5f\x2d\xb5\x29\x71\x48\x26\x3a\x8f\x4a\xf7\xc7\xf3\xc3\x1f\xc9\xfb\x57\xc9\x8b\x4f\xe5\xd9\x2c\xd8\xc4\xc0\x92\x46\x39\x58\x71\xed\x8a\x9b\x3d\x3e\x4a\xb6\x1f\x5c\x85\xd6\x7c\xe7\xd1\xec\xed\xef\xbf\x3f\x9f\xb4\xa7\xdf\x3e\x17\x1e\xec\x9c\x81\x96\x79\x7c\x1b\x38\xf2\x64\xd0\x38\x7e\x0f\x58\xbe\xd5\xbd\x71\x7f\xf5\xee\xf5\x7b\x77\xbc\xbc\x11\x4d\x7b\x5d\xd3\xfa\x6d\x16\x0e\x1a\x60\x62\x49\x7d\x58\x63\x8d\xe8\x34\x00\xa9\x2f\x09\x3b\xcb\x44\xaa\x7b\xed\x54\xbf\x3a\x97\xae\x1c\xbb\xcc\x52\x8d\x91\x3b\x86\x7b\x97\x4b\xc3\x1d\x5b\x25\x77\xc9\x71\xea\xa5\xef\xaa\x21\xd5\x6b\x5f\x96\xfd\x5f\x00\x00\x00\xff\xff\xeb\x7f\xd6\x12\x19\x03\x00\x00")

func _002_create_articleSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_create_articleSql,
		"002_create_article.sql",
	)
}

func _002_create_articleSql() (*asset, error) {
	bytes, err := _002_create_articleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_create_article.sql", size: 793, mode: os.FileMode(436), modTime: time.Unix(1541991449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_create_commentSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\x31\x4e\xc3\x40\x10\x05\xd0\xde\xa7\x98\x2e\xb6\x20\x92\x8d\x14\x81\x14\xb9\x41\x69\x38\x00\x75\xb4\xac\xc7\x61\x14\x7b\xd6\x1a\xcf\x42\x7c\x07\x24\x1a\x6e\x40\x4d\x41\x97\x02\x8e\x13\x44\xc7\x15\x90\xb3\x31\x58\x90\xd6\xf3\xc6\xbb\x7f\xff\x74\x0a\x27\x35\xad\xc4\x28\xc2\x75\x13\x15\xe2\x1a\x50\x73\x53\x21\x50\x09\xb8\xa1\x56\x5b\xb0\xae\xae\x91\x75\x1e\x59\xc1\xde\x85\xf9\xe1\x6b\x1c\x01\x00\x50\x01\xc4\x1a\x67\x69\x02\xec\x14\xd8\x57\x15\x18\xaf\x6e\x49\x6c\x05\x7b\x77\xba\x77\x46\x94\x6c\x85\xcb\x91\x2f\xb0\x34\xbe\x0a\x3b\x01\x31\xd9\x35\x9b\x1a\x81\xef\x8c\xd8\x5b\x23\x71\x36\x3b\xe6\xbc\x10\x0c\xe2\x6c\x76\x94\x58\xc7\x8a\xac\xa0\xb8\x39\xdc\x20\x64\xf8\x7f\x7c\x1a\xc6\xad\x1a\xf5\x2d\x28\x71\xb7\x17\xbf\x20\x1b\x12\xc3\x24\xdd\xbd\x3e\x7e\x3e\xbd\x7f\xbd\x3d\x64\x1f\x2f\xcf\xbb\xed\x76\x12\x96\x1b\xa1\xda\x48\x07\x6b\xec\x62\x2a\x92\x28\x41\x5e\x11\x63\x7e\xc5\xec\x16\x97\x7f\x1e\x24\xcf\xce\x7f\xfe\xdd\x47\x68\x51\x73\xaf\xe5\xc5\x3c\x1a\x77\xb2\x70\xf7\x0c\xe3\x5a\x86\x32\xbe\x03\x00\x00\xff\xff\xb4\xbd\x8e\x78\xb9\x01\x00\x00")

func _003_create_commentSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_create_commentSql,
		"003_create_comment.sql",
	)
}

func _003_create_commentSql() (*asset, error) {
	bytes, err := _003_create_commentSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_create_comment.sql", size: 441, mode: os.FileMode(436), modTime: time.Unix(1541991460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcb\x6e\xd3\x40\x14\x86\xf7\x7e\x8a\xa3\x28\x92\x13\x35\x15\xb6\xdb\xa8\x2d\x91\x17\xb9\xd0\x5b\x02\x24\x11\x81\x66\x15\x0d\xce\xd8\x99\x60\xcf\x38\x33\xe3\x84\xb2\xa2\x9b\x0a\xa1\x22\x40\xaa\xe8\x16\x89\x4d\x37\x08\x21\x50\xe9\xa2\xf0\x36\x76\xca\x8a\x57\x40\x4e\x62\x6a\xaa\x4a\xf5\xd2\xf3\x7f\xe7\xf2\xff\x67\x79\x19\x96\x3c\xe2\x70\x24\x31\x74\x7c\xa5\xcf\x99\x0f\x12\x3d\x75\x31\x10\x1b\xf0\x73\x22\xa4\x80\x40\x60\x5e\x52\x2c\x8e\x63\xd1\xfc\x31\xfe\x95\x53\x00\x00\x48\x1f\x08\x95\x39\x5d\xcb\x03\x65\x12\x68\xe0\xba\x80\x02\xc9\x7a\x84\x5a\x1c\x7b\x98\xca\xc2\x4c\xe7\x0f\x18\xc5\x30\x46\xdc\x1a\x20\x9e\x33\xd2\xf2\x3e\xb6\x51\xe0\x4a\x50\x55\xb0\x98\x17\x23\xa0\x4e\x8f\x4f\xa3\x57\x3f\xc2\x77\x6f\xd4\x05\x8e\x84\x98\x30\xde\xbf\xaa\x50\x2c\xde\x52\x22\xfc\x72\x38\xfd\x78\xb0\xe0\xe3\x81\x7b\x3e\x67\x36\x71\x71\x2f\x35\x73\x02\xc6\x55\xe6\xca\xf9\x9e\x37\x2b\xae\x8a\x47\xdf\x4e\xc3\xc3\xa3\xe8\xe4\xec\xf7\xc9\xf7\x45\x0b\x6b\x80\xa8\x73\x1b\x08\xea\xf4\xe2\xc3\xe5\xaf\xf7\xff\x91\x42\x22\x19\x88\x19\xb8\x7a\xc3\x52\x7a\xca\x96\xd7\x67\xd1\xcb\x83\xbb\xa0\x85\x5f\xdf\x5e\x1e\xff\xfc\x73\x71\xa4\x47\x9f\x3f\x85\xe7\xe7\x89\x4d\x9c\x78\x88\xef\xc3\x33\xbc\x9f\x23\xfd\xbc\x92\xc7\xd4\x21\x14\x9b\x3b\x94\xb2\x5a\xe5\x5a\x30\xa6\xf1\xaf\x45\x6c\xa9\xc0\xd2\x0c\xa4\xbd\x9e\x74\x33\x17\x21\xa8\x25\x45\x21\x54\x60\x2e\xe3\x09\xd9\x3c\xfb\x59\x9c\x85\x24\x95\xc2\x35\x7b\xf3\xca\x18\xb9\x01\x16\xb9\x8c\x5e\x5c\x4f\xbe\x4c\x21\xd3\xac\xd4\x6b\x9b\x46\x56\x0c\x50\x51\x37\xb2\xba\xa6\x69\xd9\x4a\xd9\xc1\x1b\x72\xa7\x38\x1a\x7a\x36\x19\xa0\x40\xef\x56\x2b\xf5\xb2\x69\x66\x87\xd5\x3b\x6b\xbb\x8d\xce\xd2\x96\xd3\x40\x93\xf6\x56\xcd\xd8\xed\x8c\xc7\x8f\x19\x69\x7b\xad\x7b\x5c\xae\xb7\x3a\xb4\xdd\x40\xd5\x51\xe7\xc1\xc8\xee\xd6\x49\xd3\x5f\x6b\xed\x35\x37\xb5\xfb\xa2\xcc\xb9\x58\x5d\x79\xe4\xd1\x6d\xc3\x76\xda\x7b\xc1\x93\xda\x8b\xe1\x4a\x97\x3d\xb4\xb4\x6d\x7b\xa3\x6c\x9a\x99\x82\x9e\x2f\x29\xe9\xbb\xaf\xb1\x09\x4d\x5f\xfe\xec\xde\xff\x06\x00\x00\xff\xff\xd3\xea\x8e\x0a\x19\x03\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 793, mode: os.FileMode(436), modTime: time.Unix(1541990591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_create_user_profileSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xb9\xad\x44\xd7\x45\x72\xea\x90\x62\x0c\xa5\xe4\x92\x07\xe8\x39\x59\x4b\x63\x7b\xe8\x6a\xd7\x5d\xad\x62\x8b\x52\x28\x84\x80\xa1\x14\x0a\x09\xf4\xd0\x84\x9e\x5c\x7a\x29\xad\xe9\xc1\xa5\x69\xde\x26\xb2\xd2\xb7\x28\x92\xad\x5a\xfd\x03\xa5\x3a\x08\x56\xfa\x7d\x9f\xbe\x99\xd1\xb4\x5a\x70\x27\xa6\xa1\x11\x16\xe1\xd1\xd8\x89\x8c\x1e\x83\x15\x7d\x89\x40\x03\xc0\x29\x25\x36\x81\x34\x41\x73\x38\x36\x7a\x40\x12\xbb\x4e\x68\xb0\x84\xd7\x50\xf3\x95\xeb\x00\x00\x50\x04\xa4\xac\x1b\xf8\x1e\x28\x6d\x41\xa5\x52\x82\x48\xad\x3e\x24\x15\x1a\x8c\x51\x59\x5e\x71\x06\x85\x54\x22\x46\x38\x16\x26\x1c\x09\xe3\x06\x1d\x0f\x22\x1c\x88\x54\xae\x55\x6b\x2c\xc1\x29\x58\x52\x59\xe5\xb9\x05\x02\x08\x75\x5c\x9a\x01\x0b\xa0\xaf\x33\xee\xc3\x90\x8c\x64\x6b\x51\x9f\x8c\x1d\x81\xaa\x9d\xdb\xcd\x2c\xb5\x03\x63\x5b\x8b\xe2\xfc\xed\xea\xf5\x7c\x23\xc6\x58\x90\x84\xa6\xf6\xcf\x54\xe3\x91\x56\x8d\xe4\xc1\xdf\x18\x11\x45\x06\x93\xa4\x11\xa3\xd3\xf9\x47\x8e\xfc\xe2\x53\x7e\xf9\x7c\x93\x63\xa4\xfb\xfd\xec\x7f\xd4\xc5\x6c\x91\xcf\xaf\x37\x6a\x52\xd6\x68\xb0\x38\xb5\x5b\xe0\xe6\xea\x45\x71\xf5\x72\x03\x8c\x0d\xc5\xc2\x64\xf0\x18\x33\x97\x22\xcf\xf1\x00\xd5\x90\x14\xf6\x0e\x94\xd2\xfb\x0f\x7f\x9b\x59\xaf\xfd\xf3\x93\x65\x9a\x04\x6d\x2f\xb5\x83\xbd\xda\xbb\xc7\x8a\xf3\xf7\xab\xd9\xf2\xf6\xe3\xbb\xd5\xc9\x29\xeb\x3a\x0e\xa9\x04\x8d\x2d\x63\x68\x38\x6a\xfe\x25\x47\x6e\x3d\x79\x9e\xe0\x94\x57\xa3\xe2\x55\xcf\x79\xd5\x55\xbe\xe9\x1b\xaf\xea\xe7\x55\x1d\x9e\x73\x2c\x64\x8a\x09\xb8\x2c\xff\xf6\x35\x3f\x9b\x33\x0e\x2c\xa8\x6e\xf7\xf7\x76\x5b\x7e\xbb\xe5\xef\x94\x27\x3b\x7c\xd2\xf6\xfd\x7b\x0f\x82\xdd\x9d\xbb\xa1\x8e\x2b\xa0\xb3\x57\x5f\xe5\xf1\xe6\xcb\x87\xfc\xcd\x35\xac\x96\x8b\xfc\xe2\x73\xf9\xe0\xfb\xe9\xb2\x98\x2d\x6e\xcf\x2e\x8b\x57\x27\x8c\x3b\x6c\x32\x22\x89\x60\x4d\x8a\x4f\xab\x36\x1d\xc0\x84\xa4\x84\x50\x47\xa4\x86\x10\x67\x20\x69\x80\xce\x33\xe6\x75\x9d\xe6\xea\xec\xeb\x89\x6a\x2e\xcf\x2f\x2b\xf3\x23\x00\x00\xff\xff\x98\x64\x1c\xc8\x64\x03\x00\x00")

func _005_create_user_profileSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_create_user_profileSql,
		"005_create_user_profile.sql",
	)
}

func _005_create_user_profileSql() (*asset, error) {
	bytes, err := _005_create_user_profileSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_create_user_profile.sql", size: 868, mode: os.FileMode(436), modTime: time.Unix(1541993861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_album.sql": _001_create_albumSql,
	"002_create_article.sql": _002_create_articleSql,
	"003_create_comment.sql": _003_create_commentSql,
	"004_create_user.sql": _004_create_userSql,
	"005_create_user_profile.sql": _005_create_user_profileSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_album.sql": &bintree{_001_create_albumSql, map[string]*bintree{}},
	"002_create_article.sql": &bintree{_002_create_articleSql, map[string]*bintree{}},
	"003_create_comment.sql": &bintree{_003_create_commentSql, map[string]*bintree{}},
	"004_create_user.sql": &bintree{_004_create_userSql, map[string]*bintree{}},
	"005_create_user_profile.sql": &bintree{_005_create_user_profileSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

