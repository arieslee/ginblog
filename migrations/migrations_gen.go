// Code generated by go-bindata.
// sources:
// ../migrations/001_create_album.sql
// ../migrations/002_create_article.sql
// ../migrations/003_create_comment.sql
// ../migrations/004_create_user.sql
// ../migrations/005_create_user_profile.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_albumSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x8b\xd3\x50\x14\xc5\xf7\xf9\x14\x77\x97\x04\x33\x90\x28\x03\xe2\x90\x8d\xd6\xc5\x6c\xdc\xf8\x07\x77\xc3\x6b\x72\x5b\x1f\x93\xbc\x94\x97\xfb\xa6\x66\xa7\xc8\x38\x28\x2d\x22\xa8\x2d\xb8\xa9\xae\x04\xc5\x8a\x4a\x2d\x28\xf8\x69\x92\x34\x2b\xbf\x82\x34\x7f\xda\x50\xaa\xdb\xdc\xf3\xbb\x39\xf7\xbc\x73\x70\x00\x97\x42\xde\x97\x8c\x10\xee\x0e\x34\x5f\x46\x03\x20\xd6\x0d\x10\x78\x0f\xf0\x21\x8f\x29\x06\x16\x74\x55\x78\xa4\x79\x12\xd7\xaa\x6a\x5a\x7e\x33\x34\x00\x00\xee\x03\x17\x64\x38\xb6\x09\x22\x22\x10\x2a\x08\x80\x29\x8a\x4e\xb8\xf0\x24\x86\x28\xc8\x2a\x75\xc4\x29\x40\x38\x63\xd2\x7b\xc0\xa4\x71\xf9\xf0\xb0\xa5\xf7\xb1\xc7\x54\x40\xa0\xeb\xe0\x45\xe1\x9a\x01\x3d\x7b\x73\x91\x7f\x9c\x65\xb3\x8b\xe2\xfd\x54\xaf\x56\x0c\xb8\x47\x4a\xee\x2c\xd9\xc7\xd6\xc2\x1a\x3b\xc5\x64\x18\x49\x3f\x6e\x73\xf6\x7e\x30\x3d\xff\x56\xbc\xfa\xbc\x9a\x8f\x6b\x34\x56\x61\xc8\x64\xf2\xaf\x3f\x56\xa2\x2a\x99\x6d\x0c\xcd\xdc\x6e\xed\x7d\xf1\x32\x5d\x3e\xc9\x26\x8b\x62\xf2\xbd\xa6\xce\x38\x0e\x85\x0a\xff\x47\x15\xd3\xf3\xd5\xfc\x67\xf6\xe9\x5d\xf6\xfa\x4b\x63\x88\x18\xa9\x18\x88\x8b\xa4\x04\xb7\x9c\xb3\xe5\xf2\xe7\x8b\xec\xd1\xe3\x6b\x60\xaf\xc6\xcf\xf2\x0f\xbf\xff\xfc\x1a\x39\xe9\x8f\xaf\x95\x87\x26\x4a\xc9\xcb\xc3\x4e\x31\x31\xb8\x6f\x6e\x82\x82\xe3\x5b\x9d\x9b\xf7\x4f\xee\xdc\xb8\x77\x1b\x8c\xf2\xc9\xac\xfa\x3c\xab\x36\x6c\x55\x16\x4c\x50\x31\x17\x7d\xe8\x92\x44\xd4\x4c\x40\xd1\xe7\x02\xdd\x63\x21\xa2\xce\xf5\x9d\x02\xb8\xce\x95\x8d\xcd\x75\x8c\x31\x92\xab\xa8\x77\xb5\x71\xec\xea\xf9\xdb\x65\xfa\x74\xa4\x1f\x69\x5a\xbb\x91\x9d\x68\x28\xda\x9d\xac\x9a\xf8\x37\x00\x00\xff\xff\xca\x97\x6e\xea\xb4\x02\x00\x00")

func _001_create_albumSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_albumSql,
		"001_create_album.sql",
	)
}

func _001_create_albumSql() (*asset, error) {
	bytes, err := _001_create_albumSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_album.sql", size: 692, mode: os.FileMode(420), modTime: time.Unix(1539095334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_create_articleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x6b\xd4\x50\x14\xc5\xf7\xf9\x14\x77\x97\x0c\x4e\x61\x46\x29\xa8\x25\x1b\x1d\x17\x05\x71\xa1\x56\xdc\x95\xd7\xe4\x4e\xfa\x68\xf2\xde\xf0\x72\x5f\xa7\xd9\x55\x64\x18\x14\x8b\x08\xda\x76\xe1\xa2\xea\x46\xf0\x4f\x45\xa5\x0a\x2a\x7e\x19\x27\x93\xac\xfc\x0a\x92\xe4\xa5\x89\xd2\x71\x9b\x9c\xdf\xbd\xe7\x9e\x77\x96\x96\xe0\x5c\xc4\x03\xc5\x08\x61\x6d\x64\xf9\x4a\x8e\x80\xd8\x46\x88\xc0\x87\x80\x3b\x3c\xa6\x18\x98\x22\xee\x85\xb8\x62\x79\x0a\x0b\x5d\xf5\xdf\x7c\x75\x2c\x00\x00\xee\x03\x17\xe4\xf4\x7b\x1d\x10\x92\x40\xe8\x30\x04\xa6\x49\xae\x73\xe1\x29\x8c\x50\x50\xb7\xd4\x11\xa7\x10\x61\x9b\x29\x6f\x93\x29\xe7\xfc\xf2\x72\x4b\xef\xe3\x90\xe9\x90\xc0\xb6\xc1\x93\x51\xc1\x80\x9d\xee\x4f\xe7\x6f\x8e\xd2\xa3\x69\xfe\xf2\xd0\xae\x46\x68\xc5\xff\x1e\x70\x16\xb7\x76\xf3\xba\x91\x6f\x61\x32\x96\xca\x8f\xdb\x4c\xef\x6c\x68\x36\xf9\x94\x3f\x7d\x9f\x1d\xef\x19\x34\xd6\x51\xc4\x54\xb2\x68\x5b\x25\xf2\xa4\xa0\x82\x0e\xa5\x08\x08\x77\xa8\xb9\xa7\x39\xe2\xdd\xab\x74\x7f\x6a\xf4\x4c\xd3\xa6\x54\xcd\xcc\x05\x5e\x7e\xfd\x78\x9e\xed\x4e\xea\x1d\x65\xee\x4d\xc4\x35\xd0\x6b\x79\x7f\xfc\x64\xf6\xf5\x7e\x7a\x70\x92\x1f\x7c\x36\xd4\x36\xc7\xb1\xd0\xd1\xff\xa8\xfc\x70\x92\x1d\x7f\x4b\xdf\xbe\x48\x9f\x7d\xa8\x8f\x26\x46\x3a\x06\xe2\x22\x29\xc1\x86\xeb\x37\xdc\xfc\xe1\x49\xba\x7b\xef\x32\xf4\xb2\xbd\x07\xf3\xd7\x3f\x7f\x7f\x7f\xd4\x9f\x7d\xf9\x58\x79\x30\x73\x46\x8a\x97\xe1\x6d\x61\xe2\x70\xbf\x73\xfa\x18\xb0\x7a\x63\x70\xed\xee\xfa\xed\xab\x77\x6e\x39\x65\x1b\xba\xe6\xba\xae\xf1\xdb\xad\x1c\x74\x40\xc7\x5c\x04\xb0\x41\x0a\xd1\xea\x00\x8a\x80\x0b\x74\x57\x85\x90\x83\x2b\xff\x74\xcb\xbd\x70\xe9\xd4\x65\x91\x6a\x8c\xe4\x6a\x1a\x5e\xac\x0d\xbb\xa6\x47\xf6\x8a\x65\xb5\x0b\x3f\x90\x63\xd1\xae\x7c\x5d\xf4\x3f\x01\x00\x00\xff\xff\x63\x3a\x72\xc3\x15\x03\x00\x00")

func _002_create_articleSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_create_articleSql,
		"002_create_article.sql",
	)
}

func _002_create_articleSql() (*asset, error) {
	bytes, err := _002_create_articleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_create_article.sql", size: 789, mode: os.FileMode(420), modTime: time.Unix(1539268124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_create_commentSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x3d\x4f\x71\x5b\x13\x41\xa5\x04\xa9\x02\xa9\xca\x82\xba\xf0\x00\xcc\x95\x71\x2e\xe5\x54\xe7\x1c\xd9\x67\x68\xde\x01\x89\x85\x37\x60\x66\x60\xeb\x00\x8f\x53\xc4\xc6\x2b\xa0\xd4\x6d\x89\x68\xd7\xdc\x77\xb1\x7f\xff\xe3\x31\x9c\x35\xb4\x70\x4a\x10\x6e\xdb\xa4\x72\xb6\x05\x51\x77\x06\x81\x6a\xc0\x15\x79\xf1\xa0\x6d\xd3\x20\xcb\x34\xd1\x0e\x7b\x17\xe7\xbb\xaf\x69\x02\x00\x40\x15\x10\x4b\x5a\xe4\x19\xb0\x15\xe0\x60\x0c\xa8\x20\x76\x4e\xac\x1d\xf6\xee\x7c\xeb\x94\x13\xd2\x06\xe7\x03\x5f\x61\xad\x82\x89\x3b\x11\x31\xe9\x25\xab\x06\xe1\x41\x39\x7d\xaf\x5c\x5a\x4c\x4e\xb1\xe0\xcc\x41\x5c\x4c\x4e\x12\x6d\x59\x90\x05\x04\x57\xbb\x0b\xc4\x08\xc7\xa7\xe7\x71\xec\x45\x49\xf0\x20\xc4\xdd\x56\xfc\x81\x62\x1f\x18\x46\xf9\xe6\xfd\xf9\xfb\xe5\xf3\xe7\xe3\xa9\xf8\x7a\x7b\xdd\xac\xd7\xa3\xb8\xdc\x3a\x6a\x94\xeb\x60\x89\x5d\x4a\x55\x96\x64\xc8\x0b\x62\x2c\x6f\x98\xed\xec\xfa\xdf\x7b\x94\xc5\xe5\xe1\xdf\x7d\x04\x8f\x52\x06\xa9\xaf\xa6\xc9\xb0\x92\x99\x7d\x64\x18\xb6\xb2\xef\xe2\x37\x00\x00\xff\xff\xda\x35\xd1\x38\xb8\x01\x00\x00")

func _003_create_commentSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_create_commentSql,
		"003_create_comment.sql",
	)
}

func _003_create_commentSql() (*asset, error) {
	bytes, err := _003_create_commentSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_create_comment.sql", size: 440, mode: os.FileMode(420), modTime: time.Unix(1539095334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcb\x6e\xd3\x4e\x14\xc6\xf7\x7e\x8a\xa3\x28\x92\x13\x35\xd5\xdf\x76\x1b\x35\xfd\x47\x5e\xe4\x42\x6f\x09\x90\x44\x04\x9a\x55\x34\x38\x63\x67\x82\x3d\xe3\xcc\x8c\x13\xca\x8a\x6e\x2a\x84\x8a\x00\xa9\xa2\x5b\x24\x36\xdd\x20\x84\x40\xa5\x8b\xc2\xdb\xd8\x29\x2b\x5e\x01\x39\x89\xa9\x41\x95\xea\xa5\xe7\xfb\x7d\xe7\xf2\x9d\xd5\x55\x58\xf1\x88\xc3\x91\xc4\xd0\xf5\x95\x01\x67\x3e\x48\xf4\xd8\xc5\x40\x6c\xc0\x4f\x89\x90\x02\x02\x81\x79\x59\xb1\x38\x8e\x45\x8b\xc7\xf8\x57\x4e\x01\x00\x20\x03\x20\x54\xe6\x74\x2d\x0f\x94\x49\xa0\x81\xeb\x02\x0a\x24\xeb\x13\x6a\x71\xec\x61\x2a\x0b\x73\x9d\x3f\x64\x14\xc3\x04\x71\x6b\x88\x78\xce\x48\xcb\x07\xd8\x46\x81\x2b\x41\x55\xc1\x62\x5e\x8c\x80\x3a\x3b\x39\x8b\x5e\x7c\x0b\xdf\xbc\x52\x97\x38\x12\x62\xca\xf8\xe0\xda\xa1\x58\xbc\xc5\x22\xfc\x74\x34\x7b\x7f\xb8\xe4\xe3\x86\xfb\x3e\x67\x36\x71\x71\x3f\xd5\x73\x02\xc6\x2e\x0b\xe5\x62\xce\x9b\x15\xd7\xe6\xd1\x97\xb3\xf0\xe8\x38\x3a\x3d\xff\x79\xfa\x75\x59\xc2\x1a\x22\xea\xdc\x06\x82\x3a\xbb\x7c\x77\xf5\xe3\xed\x5f\xa4\x90\x48\x06\x62\x0e\xae\xdf\x30\x94\x9e\x5a\xcb\xcb\xf3\xe8\xf9\xe1\xff\xa0\x85\x9f\x5f\x5f\x9d\x7c\xff\x75\x79\xac\x47\x1f\x3f\x84\x17\x17\xc9\x9a\x38\xf1\x10\x3f\x80\x27\xf8\x20\x47\x06\x79\x25\x8f\xa9\x43\x28\x36\x77\x29\x65\xf5\xea\x3f\xc1\x98\xc6\x9f\x12\xf1\x4a\x05\x96\x66\x20\xed\x52\x52\xcd\x5c\x86\xa0\x96\x15\x85\x50\x81\xb9\x8c\x3b\x64\x8b\xec\xe7\x71\x16\x92\x54\xf2\xca\x04\xb9\x01\x16\xb9\x8c\x5e\x2c\x25\x5f\xa6\x90\x69\x55\x1b\xf5\x2d\x23\x2b\x86\xa8\xa8\x1b\x59\x5d\xd3\xb4\x6c\xb5\xe2\xe0\x4d\xb9\x5b\x1c\x8f\x3c\x9b\x0c\x51\xa0\xf7\x6a\xd5\x46\xc5\x34\xb3\xa3\xda\x7f\x1b\x7b\xcd\xee\xca\xb6\xd3\x44\xd3\xce\x76\xdd\xd8\xeb\x4e\x26\x0f\x19\xe9\x78\xed\x3b\x5c\x96\xda\x5d\xda\x69\xa2\xda\xb8\x7b\x6f\x6c\xf7\x1a\xa4\xe5\x6f\xb4\xf7\x5b\x5b\xda\x5d\x51\xe1\x5c\xac\xaf\x3d\xf0\xe8\x8e\x61\x3b\x9d\xfd\xe0\x51\xfd\xd9\x68\xad\xc7\xee\x5b\xda\x8e\xbd\x59\x31\xcd\x4c\xbe\xac\xa4\xaf\xbc\xce\xa6\x34\x7d\xe7\xf3\xeb\xfe\x1d\x00\x00\xff\xff\xdd\x04\xd8\xff\x07\x03\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 775, mode: os.FileMode(420), modTime: time.Unix(1539095334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_create_user_profileSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xd1\x8a\xd3\x4e\x14\xc6\xef\xf3\x14\xe7\x2e\x09\xff\xe9\x9f\xa4\x6b\x97\x4a\x29\x88\xec\x8d\x0f\xe0\xf5\xee\xb4\x39\x6d\x07\x93\x99\x3a\x33\x59\xdb\x3b\x41\x65\xd7\xad\x5e\x59\x10\xb5\xa2\x5e\x54\x44\x10\xed\xc2\xd2\xd5\x6e\xf1\x65\x9a\xa4\x77\xbe\x82\x64\xda\x6e\xb3\x2a\x88\xb9\xca\x49\x7e\xdf\x37\x5f\xce\xc9\x29\x95\xe0\xbf\x88\xb5\x25\xd5\x08\xb7\xbb\x56\x20\x45\x17\x34\x6d\x84\x08\xac\x05\xd8\x63\x4a\x2b\x88\x15\xca\xfd\xae\x14\x2d\x16\x62\xcd\x6a\x4a\xcc\xe1\x15\x54\x7c\xe5\x58\x00\x00\x2c\x00\xc6\xb5\xe3\x7b\x2e\x70\xa1\x81\xc7\x61\x08\x34\xd6\x62\x9f\xf1\xa6\xc4\x08\xb9\x26\x86\x93\x48\x43\x4e\x23\x84\x43\x2a\x9b\x1d\x2a\x1d\xbf\xe2\x42\x80\x2d\x1a\x87\x2b\xd5\x0a\x53\xd8\x03\xcd\x78\xdf\x78\x6e\x01\x1f\x9a\x22\xca\xcd\xc0\xf6\xa1\x21\xfa\xc4\x83\x36\x93\xa1\xbd\x12\x35\x98\xd4\x9d\x4b\xe3\x72\x31\xca\xc6\xc0\xb6\xb7\x0e\xd9\xf0\x4d\xfa\x7c\xbc\xd6\x62\x44\x59\x78\x45\xfb\x7b\xa8\x6e\x47\xf0\x42\x70\xff\x4f\x0c\x0d\x02\x89\x4a\x6d\x9d\x2a\x95\xbf\xc4\x48\x46\x5f\x92\xd7\xf7\xd7\x31\x3a\xa2\xd1\xe8\xff\x83\x38\x3b\x9e\x24\xe3\xf9\x5a\xcc\xb8\x96\x02\x34\xf6\xf4\x16\x58\xcc\x06\xd9\xec\xe9\x1a\xe8\x4a\x16\x51\xd9\x87\x3b\xd8\x77\x58\xe0\x5a\x2e\x20\x6f\x33\x8e\xf5\x5b\x9c\x8b\xbd\x9b\xbf\x0c\xac\x5e\xbe\x3c\x32\x4f\xa3\x50\xd7\x63\xdd\xaa\x6e\xbc\xeb\x76\x36\xfc\x90\x1e\x4f\x97\x9f\xdf\xa7\x0f\x1e\xd9\x35\xcb\x62\x5c\xa1\xd4\x79\x0c\x01\x07\xc5\x5f\xe4\xc0\x61\x01\xd9\x4c\x9e\x28\xec\x11\x33\x2a\x62\x9a\x4e\x4c\x5b\xc9\xba\x71\xc4\x74\x80\x98\x4f\x71\xad\x43\x1a\xc6\xa8\xc0\xb1\x7d\x9b\x80\x9d\x5c\x7c\x4b\x9e\x8d\xf3\x3b\x53\xfa\xd7\xab\xbb\x25\xaf\x5c\xf2\x76\xf2\x4a\xb7\xef\x96\x3d\xef\xda\x0d\x7f\x77\xe7\xff\xa6\x88\x0c\x50\xa9\x6e\xae\xbc\x5c\x9c\x7f\x4a\x5e\xcd\x61\x71\x7e\x92\x9e\x4d\xf3\x07\xd9\x68\x90\x9e\xbe\x4b\x47\x8f\xb3\xd1\x60\xf9\xfd\x28\x7b\xf9\x30\x1b\x9e\x25\xf3\x89\x39\xeb\xe4\x6d\x7a\xfa\xf5\xc7\xc5\x93\x6c\xf6\x62\x79\xf4\x31\x99\x4e\x6c\xb7\x66\x15\xd7\x66\x4f\xdc\xe3\xc5\xc5\xb9\xb2\x2e\x3f\x03\x00\x00\xff\xff\xce\x99\x06\xcd\x60\x03\x00\x00")

func _005_create_user_profileSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_create_user_profileSql,
		"005_create_user_profile.sql",
	)
}

func _005_create_user_profileSql() (*asset, error) {
	bytes, err := _005_create_user_profileSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_create_user_profile.sql", size: 864, mode: os.FileMode(420), modTime: time.Unix(1539095334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_album.sql": _001_create_albumSql,
	"002_create_article.sql": _002_create_articleSql,
	"003_create_comment.sql": _003_create_commentSql,
	"004_create_user.sql": _004_create_userSql,
	"005_create_user_profile.sql": _005_create_user_profileSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_album.sql": &bintree{_001_create_albumSql, map[string]*bintree{}},
	"002_create_article.sql": &bintree{_002_create_articleSql, map[string]*bintree{}},
	"003_create_comment.sql": &bintree{_003_create_commentSql, map[string]*bintree{}},
	"004_create_user.sql": &bintree{_004_create_userSql, map[string]*bintree{}},
	"005_create_user_profile.sql": &bintree{_005_create_user_profileSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

